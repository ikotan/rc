"-------------------------------------------------------------------------------
" プラグインごとの設定 Plugins
"-------------------------------------------------------------------------------

"------------------------------------
" YankRing.vim
"------------------------------------
" Yankの履歴参照
" nmap ,y ;YRShow<CR>

"------------------------------------
" yankround.vim
"------------------------------------
" Yankの履歴参照
nmap p <Plug>(yankround-p)
nmap P <Plug>(yankround-P)
nmap <C-p> <Plug>(yankround-prev)
nmap <C-n> <Plug>(yankround-next)
let g:yankround_max_history = 50             " 履歴取得集
let g:yankround_dir = '~/.cache/yankround'   " 履歴保管場所

"------------------------------------
" errormarker.vim 
"------------------------------------
" let b:current_compiler='perl'
" setl mp=$HOME/.vim/vimparse.pl\ -c\ %\ $*
" if !exists('g:perl_flyquickfixmake')
    " let g:perl_flyquickfixmake = 1
    " au BufWritePost *.pm,*.pl,*.t silent make
" endif

"------------------------------------
" Align
"------------------------------------
" Alignを日本語環境で使用するための設定
let g:Align_xstrlen = 3

"------------------------------------
" neocomplete.vim
" neocomplcache.vim
"------------------------------------
" AutoComplPopを無効にする
let g:acp_enableAtStartup = 0
" NeoComplCacheを有効にする
let g:neocomplcache_enable_at_startup = 1
" smarrt case有効化。 大文字が入力されるまで大文字小文字の区別を無視する
let g:neocomplcache_enable_smart_case = 1
" 補完が自動で開始される文字数
let g:neocomplcache_auto_completion_start_length = 1
" シンタックスをキャッシュするときの最小文字長を3に
let g:neocomplcache_min_syntax_length = 3
" neocomplcacheを自動的にロックするバッファ名のパターン
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'
" -入力による候補番号の表示
let g:neocomplcache_enable_quick_match = 1
" 補完候補の一番先頭を選択状態にする(AutoComplPopと似た動作)
" let g:neocomplcache_enable_auto_select = 1
"ポップアップメニューで表示される候補の数。初期値は100
let g:neocomplcache_max_list = 20
" Define dictionary.
let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default'     : '',
    \ 'perl'        : $HOME . '/.vim/dict/perl.dict',
    \ 'javascript'  : $HOME.'/.vim/dict/javascript.dict'
    \ }
" Plugin key-mappings.
inoremap <expr><C-g>  neocomplcache#undo_completion()
inoremap <expr><C-l>  neocomplcache#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplcache#smart_close_popup() . "\<CR>"
endfunction

" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()

"------------------------------------
" neosnippet
"------------------------------------
" Plugin key-mappings.
" <TAB>: completion.
" inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<S-TAB>"

" Plugin key-mappings.
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif


"------------------------------------
" NERD_commenter.vim
"------------------------------------
" コメントの間にスペースを空ける
let NERDSpaceDelims = 1
" <Leader>xでコメントをトグル(NERD_commenter.vim)
map <Leader> c<space>
" 未対応ファイルタイプのエラーメッセージを表示しない
let NERDShutUp=1

" ------------------------------------
" surround.vim
" ------------------------------------
" s, ssで選択範囲を指定文字でくくる
nmap s <Plug>Ysurround
nmap ss <Plug>Yssurround
let g:surround_{char2nr('e')} = "begin \r end"
let g:surround_{char2nr('d')} = "do \r end"
let g:surround_{char2nr("-")} = ":\r"

"------------------------------------
" Fugitive.vim
"------------------------------------
nnoremap <Space>gd :<C-u>Gdiff<Enter>
nnoremap <Space>gs :<C-u>Gstatus<Enter>
nnoremap <Space>gl :<C-u>Glog<Enter>
nnoremap <Space>ga :<C-u>Gwrite<Enter>
nnoremap <Space>gc :<C-u>Gcommit<Enter>
nnoremap <Space>gC :<C-u>Git commit --amend<Enter>
nnoremap <Space>gb :<C-u>Gblame<Enter>

"------------------------------------
" NERDTreeToggle
"------------------------------------
nmap <silent> nd :NERDTreeToggle<Enter>

"------------------------------------
" taglist.vim
"------------------------------------
nmap <silent> tl :TlistToggle<Enter>
let Tlist_Use_Right_Window = 1  " 右側でtaglistのウィンドーを表示
let Tlist_Exit_OnlyWindow = 1   " taglistのウィンドーが最後のウィンドーならばVimを閉じる
let Tlist_Auto_Open = 1         " 自動表示
let Tlist_Auto_Update = 1       " 自動更新

"------------------------------------
" quickRun
"------------------------------------
" nmap <silent> qr :QuickRun -outputter/buffer/close_on_empty 1<Enter>
nmap <silent> qr :QuickRun -hook/time/enable 1<Enter>
nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
let g:quickrun_config = {}
let g:quickrun_config['markdown'] = {
      \   'outputter': 'browser'
      \ }

"------------------------------------
" Syntastic
"------------------------------------
let g:syntastic_enable_signs = 1          " エラー行をsignで表示する
let g:syntastic_enable_highlighting = 1   " 可能ならhighligt表示する
let g:syntastic_auto_loc_list=1           " 自動的に開いたり閉じたりする
let g:syntastic_perl_lib_path = 'lib'

let g:syntastic_mode_map = { 'mode': 'passive',
                           \ 'active_filetypes': ['ruby', 'perl', 'javascript'],
                           \ 'passive_filetypes': [] }

nnoremap <silent> <Space><C-d> :<C-u>lclose<Enter>

"------------------------------------
" jslint
"------------------------------------

" let g:JSLintHighlightErrorLine = 0

"------------------------------------
" vim-indent-guides
"------------------------------------
nnoremap <silent> <Space>id :<C-u>IndentGuidesToggle<Enter>
let g:indent_guides_auto_colors = 0
let g:indent_guides_start_level =2
let g:indent_guides_guide_size = 1
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=green ctermbg=239
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=236
if 'dark' == &background
    hi IndentGuidesOdd  ctermbg=black
    hi IndentGuidesEven ctermbg=darkgrey
else
    hi IndentGuidesOdd  ctermbg=white
    hi IndentGuidesEven ctermbg=lightgrey
endif

"------------------------------------
" indentLine
"------------------------------------
nnoremap <silent> <Space>il :<C-u>IndentLinesToggle<Enter>
set list listchars=tab:\¦\

"------------------------------------
" beautify.vim
"------------------------------------
let g:beautify#beautifier#npm_beautifier#bin = {
       \ 'javascript' : 'js-beautify',
       \ 'css'        : 'css-beautify',
       \ 'html'       : 'html-beautify' }
let g:beautify#beautifier#jq#bin = 'jq'
" let g:beautify#beautifier#html2haml#bin = 'html2haml'
let g:beautify#beautifier#sass_convert#bin = 'sass-convert'

nnoremap <silent> <Space>bj  :<C-u>Beautify js-beautify<Enter>
nnoremap <silent> <Space>bh  :<C-u>Beautify html-beautify<Enter>

"------------------------------------
" unite.vim
"------------------------------------
" The prefix key.
nnoremap    [unite]   <Nop>
nmap    f [unite]

nnoremap [unite]u  :<C-u>Unite <Space>

" 全部乗せ
nnoremap <silent> [unite]a  :<C-u>UniteWithCurrentDir -buffer-name=files buffer file_mru bookmark file<CR>
" ファイル一覧
nnoremap <silent> [unite]f  :<C-u>Unite -buffer-name=files file<CR>
" ファイル検索
nnoremap <silent> [unite]p  :<C-u>Unite -buffer-name=files file_rec/async:!<cr>
" バッファ一覧
nnoremap <silent> [unite]b  :<C-u>Unite buffer<CR>
" 常用セット
nnoremap <silent> [unite]u  :<C-u>Unite buffer file_mru<CR>
" 最近使用したファイル一覧
nnoremap <silent> [unite]m  :<C-u>Unite file_mru<CR>
" 現在のバッファのカレントディレクトリからファイル一覧
nnoremap <silent> [unite]d  :<C-u>UniteWithBufferDir file<CR>
" snippet一覧
nnoremap <silent> [unite]s  :<C-u>Unite snippet<CR>
" color一覧
nnoremap <silent> [unite]c  :<C-u>Unite colorscheme -auto-preview<CR>
" yank履歴一覧
nnoremap <silent> [unite]y  :<C-u>Unite yankround<CR>

" nnoremap <silent> [unite]b  :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>

" ウィンドウを分割して開く
au Filetype unite nnoremap <silent> <buffer> <expr> <C-j> unite#do_action('splist')
au Filetype unite inoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')

" ウィンドウを縦に分割して開く
au Filetype unite nnoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
au Filetype unite inoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')

" ESCキーを2回押すと終了する
au FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>

let g:unite_source_file_mru_limit = 200

" unite-plugins
cnoremap UH Unite help<Enter>
cnoremap UO Unite outline<Enter>

"------------------------------------
"vim Unite-grep
"------------------------------------
let g:unite_enable_start_insert = 1

" 大文字小文字を区別しない
let g:unite_enable_ignore_case = 1
let g:unite_enable_smart_case = 1

" grep検索
nnoremap <silent> ,g  :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
" カーソル位置の単語をgrep検索
nnoremap <silent> ,cg :<C-u>Unite grep:. -buffer-name=search-buffer<CR><C-R>

" grep検索結果の再呼出
nnoremap <silent> ,r  :<C-u>UniteResume search-buffer<CR>

" unite grep に ag(The Silver Searcher) を使う
if executable('ag')
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'
  let g:unite_source_grep_recursive_opt = ''
endif

" ignore files
call unite#custom#source('file_rec/async', 'ignore_pattern', '(png\|\.t\|gif\|jpeg\|jpg)$')


"------------------------------------
"ctrip vim
"------------------------------------
" 起動コマンド
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_use_migemo = 1
let g:ctrlp_clear_cache_on_exit = 0   " 終了時キャッシュをクリアしない
let g:ctrlp_mruf_max            = 1000 " MRUの最大記録数
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("t")': ['<c-a>'],
    \ }
" let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
" let g:ctrlp_custom_ignore = {
  " \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  " \ 'file': '\v\.(exe|so|dll)$',
  " \ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
  " \ }
" vimで開いたディレクトリから検索
nnoremap <silent> <space><C-p> :<C-u>CtrlP '~/'<Enter>

"------------------------------------a
" vim-gitgutter
"------------------------------------
" gitの差分
nnoremap <silent> <space>g :<C-u>GitGutterToggle<CR>
nnoremap <silent> <space>h :<C-u>GitGutterLineHighlightsToggle<CR>

" 遅延呼び出し
let s:bundle = neobundle#get('vim-gitgutter')
function! s:bundle.hooks.on_source(bundle)
    let g:gitgutter_enabled         = 0
    let g:gitgutter_highlight_lines = 0
endfunction
unlet s:bundle

"------------------------------------
" vim-over
"------------------------------------
" 置換
nnoremap <silent> <Space>o :OverCommandLine<CR>%s//g<Left><Left>
vnoremap <silent> <Space>o :OverCommandLine<CR>s//g<Left><Left>
nnoremap sub :OverCommandLine<CR>%s/<C-r><C-w>//g<Left><Left>
nnoremap subp y:OverCommandLine<CR>%s!<C-r>=substitute(@0, '!', '\\!', 'g')<CR>!!gI<Left><Left><Left>

"------------------------------------
" vim-quickhl
"------------------------------------
nmap <Space>m <Plug>(quickhl-manual-this)
xmap <Space>m <Plug>(quickhl-manual-this)
nmap <Space>n <Plug>(quickhl-manual-reset)
xmap <Space>n <Plug>(quickhl-manual-reset)

"------------------------------------
" ColorSchema{{{{
"------------------------------------
nnoremap <silent><S-c> : <C-u>call ColorRoller.roll()<CR>
nnoremap <silent><F9> : <C-u>call ColorRoller.roll()<CR>
nnoremap <silent><F8> : <C-u>call ColorRoller.unroll()<CR>

let ColorRoller = {}
let ColorRoller.colors = [
    \'solarized',
    \'jellybeans',
    \'mustang',
    \'yuroyoro256',
    \'molokai',
    \'mrkn256',
    \'lucius',
    \'adaryn',
    \'Tomorrow-Night-Bright',
    \'Tomorrow-Night-Eighties',
    \ ]

function! ColorRoller.change()
    let color = get(self.colors, 0)
    silent exe "colorscheme " . color
    redraw
    echo self.colors
endfunction

function! ColorRoller.roll()
    let item = remove(self.colors, 0)
    call insert(self.colors, item, len(self.colors))
    call self.change()
endfunction

function! ColorRoller.unroll()
    let item = remove(self.colors, -1)
    call insert(self.colors, item, 0)
    call self.change()
endfunction

"------------------------------------
" vim-powerline
"------------------------------------
" ステータスラインの表示
" set laststatus=2
" set rtp+=~/.vim/bundle/vim-powerline/autoload/powerline/Themes/solarized256.vim

"------------------------------------
" lightline
"------------------------------------
set laststatus=2
" let g:lightline = {
    " \ 'colorscheme': 'wombat'
    " \ }

let g:lightline = {
    \ 'colorscheme': 'wombat',
    \ 'mode_map': { 'c': 'NORMAL' },
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'gitgutter', 'filename' ] ]
    \ },
    \ 'component_function': {
    \   'modified': 'MyModified',
    \   'readonly': 'MyReadonly',
    \   'fugitive': 'MyFugitive',
    \   'gitgutter': 'MyGitGutter',
    \   'filename': 'MyFilename',
    \   'fileformat': 'MyFileformat',
    \   'filetype': 'MyFiletype',
    \   'fileencoding': 'MyFileencoding',
    \   'mode': 'MyMode',
    \ },
    \ 'separator': { 'left': '⮀', 'right': '⮂' },
    \ 'subseparator': { 'left': '⮁', 'right': '⮃' }
    \ }

function! MyModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &ro ? '⭤' : ''
endfunction

function! MyFilename()
  return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
    \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
    \  &ft == 'unite' ? unite#get_status_string() :
    \  &ft == 'vimshell' ? substitute(b:vimshell.current_dir,expand('~'),'~','') :
    \ '' != expand('%t') ? expand('%t') : '[No Name]') .
    \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFugitive()
  return &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head') && strlen(fugitive#head()) ? '⭠ '.fugitive#head() : ''
endfunction

function! MyGitGutter()
  if ! exists('*GitGutterGetHunkSummary')
      \ || ! get(g:, 'gitgutter_enabled', 0)
      \ || winwidth('.') <= 90
    return ''
  endif
  let symbols = [
    \ g:gitgutter_sign_added . ' ',
    \ g:gitgutter_sign_modified . ' ',
    \ g:gitgutter_sign_removed . ' '
    \ ]
  let hunks = GitGutterGetHunkSummary()
  let ret = []
  for i in [0, 1, 2]
    if hunks[i] > 0
      call add(ret, symbols[i] . hunks[i])
    endif
  endfor
  return join(ret, ' ')
endfunction

function! MyFileformat()
  return winwidth('.') > 70 ? &fileformat : ''
endfunction

function! MyFiletype()
  return winwidth('.') > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! MyFileencoding()
  return winwidth('.') > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyMode()
  return winwidth('.') > 60 ? lightline#mode() : ''
endfunction

"------------------------------------
" vim-startify
"------------------------------------

" startifyのヘッダー部分に表示する文字列を設定する(dateコマンドを実行して日付を設定している)
let g:startify_custom_header =
  \ map(split(system('date'), '\n'), '"   ". v:val') + ['','']
" デフォルトだと、最近使ったファイルの先頭は数字なので、使用するアルファベットを指定
let g:startify_custom_indices = ['f', 'g', 'h', 'r', 'i', 'o', 'b']
" よく使うファイルをブックマークとして登録しておく
let g:startify_bookmarks = [
  \ '~/.vimrc',
  \ '~/localrepos/blog/vac_20131215.md',
  \ ]

nnoremap <silent> <space><Enter> :<C-u>Startify<CR>

"------------------------------------
" vcscommand.vim 
"------------------------------------
nnoremap <silent> vd :<C-u>VCSDiff<CR>
nnoremap <silent> vdv :<C-u>VCSVimDiff<CR>
nnoremap vdl :<C-u>VCSDiff<Space>
nnoremap <silent> vl :<C-u>VCSLog<CR>
nnoremap <silent> vs :<C-u>VCSStatus<CR>

